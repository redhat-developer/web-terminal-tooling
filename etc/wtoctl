#!/bin/bash
#
# Copyright (c) 2020-2024 Red Hat, Inc.
# This program and the accompanying materials are made
# available under the terms of the Eclipse Public License 2.0
# which is available at https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0
#
# Contributors:
#   Red Hat, Inc. - initial API and implementation
#

set -e

SCRIPT_DIR=$(cd "$(dirname "$0")" || exit; pwd)
source "${SCRIPT_DIR}/wtoctl_help.sh"
source "${SCRIPT_DIR}/wtoctl_jq.sh"

LOGS_FILE="/tmp/wtoctl.log"

DEVWORKSPACE_ID_LABEL="controller.devfile.io/devworkspace_id"
if [ -f /var/run/secrets/kubernetes.io/serviceaccount/namespace ]; then
  NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
fi

if [[ $# -lt 1 ]]; then
  general_help
  exit 0
fi

function preflight_checks() {
  if [ -z "$NAMESPACE" ] || [ ! -f "$DEVWORKSPACE_FLATTENED_DEVFILE" ]; then
    echo "Container does not appear to be running in an OpenShift cluster -- wtoctl commands are unavailable"
    exit 1
  fi
  # Verify that the current Web Terminal has the default components we expect
  # Otherwise commands could fail in hard to understand ways
  if ! grep -q 'name: web-terminal-exec' "$DEVWORKSPACE_FLATTENED_DEVFILE" ||
     ! grep -q 'controller.devfile.io/imported-by: web-terminal-exec' "$DEVWORKSPACE_FLATTENED_DEVFILE" ||
     ! grep -q 'name: web-terminal-tooling' "$DEVWORKSPACE_FLATTENED_DEVFILE" ||
     ! grep -q 'controller.devfile.io/imported-by: web-terminal-tooling' "$DEVWORKSPACE_FLATTENED_DEVFILE"; then
    echo "Current Web Terminal does not contain expected components -- wtoctl cannot operate on this Web Terminal"
    exit 1
  fi
}

function get_current_image() {
  # Since we don't have `yq` installed in the tooling container, we have to grab the pod
  # and read it from there
  POD_JSON=$(oc get pods --namespace "$NAMESPACE" -l "$DEVWORKSPACE_ID_LABEL=$DEVWORKSPACE_ID" -o json)
  CURR_IMAGE=$(echo "$POD_JSON" | jq -r '.items[0].spec.containers[] | select(.name == "web-terminal-tooling") | .image')
  echo "$CURR_IMAGE"
}

function get_tooling_image() {
  if [[ "$1" == "help" ]] || [[ "$1" == "--help" ]]; then
    echo "Get image used for terminal"
    echo "Usage: 'wtoctl get image'"
    exit 0
  fi
  expect_no_args "wtoctl get image" "$@"
  CURR_IMG=$(get_current_image)
  echo "Current image is $CURR_IMG"
}

function set_tooling_image() {
  if [[ "$1" == "help" ]] || [[ "$1" == "--help" ]]; then
    echo "Set image used for terminal"
    echo "Usage: 'wtoctl set image <image-name>'"
    exit 0
  fi
  expect_one_arg "wtoctl set image" "$@"
  local IMAGE="$1"
  DW_JSON=$(oc get devworkspaces "$DEVWORKSPACE_NAME" -n "$NAMESPACE" -o json)
  UPDATED_JSON=$(echo "$DW_JSON" | jq --arg IMAGE "$IMAGE" "$JQ_SET_IMAGE_SCRIPT")
  if ! echo "$UPDATED_JSON" | oc apply -f - 2>"$LOGS_FILE"; then
    echo "Failed to update Web Terminal image due to conflict. Please try again."
    echo "If error persists, see logs in $LOGS_FILE"
    exit 1
  fi
  echo "Updated Web Terminal image to $IMAGE. Terminal may restart."
}

function reset_tooling_image() {
  if [[ "$1" == "help" ]] || [[ "$1" == "--help" ]]; then
    echo "Reset image used for terminal to the default"
    echo "Usage: 'wtoctl reset image'"
    exit 0
  fi
  expect_no_args "wtoctl reset image" "$@"
  DW_JSON=$(oc get devworkspaces "$DEVWORKSPACE_NAME" -n "$NAMESPACE" -o json)
  UPDATED_JSON=$(echo "$DW_JSON" | jq "$JQ_RESET_IMAGE_SCRIPT")
  if ! echo "$UPDATED_JSON" | oc apply -f - 2>"$LOGS_FILE"; then
    echo "Failed to update Web Terminal image due to conflict. Please try again."
    echo "If error persists, see logs in $LOGS_FILE"
    exit 1
  fi
  echo "Reset Web Terminal tooling image. Terminal may restart"
}

function get_timeout() {
  if [[ "$1" == "help" ]] || [[ "$1" == "--help" ]]; then
    echo "Get timeout used for terminal"
    echo "Usage: 'wtoctl get timeout'"
    exit 0
  fi
  expect_no_args "wtoctl get timeout" "$@"
  POD_JSON=$(oc get pods --namespace "$NAMESPACE" -l "$DEVWORKSPACE_ID_LABEL=$DEVWORKSPACE_ID" -o json)
  CURRENT_TIMEOUT=$(echo "$POD_JSON" | jq -r "$JQ_GET_TIMEOUT_SCRIPT")
  echo "Current timeout is $CURRENT_TIMEOUT"
}

function set_timeout() {
  if [[ "$1" == "help" ]] || [[ "$1" == "--help" ]]; then
    echo "Set timeout used for terminal"
    echo "Usage: 'wtoctl set timeout <timeout>'"
    echo "See 'wtoctl timeout --help' for timeout format"
    exit 0
  fi
  expect_one_arg "wtoctl set timeout" "$@"
  local TIMEOUT="$1"

  # Do some basic validation on timeout
  duration_pattern='^-?([.0-9]+(h|m|s|ms))+$'
  if ! [[ "$TIMEOUT" =~ $duration_pattern ]]; then
    echo "Invalid timeout duration. See 'wtoctl timeout --help' for timeout format"
    exit 1
  fi

  DW_JSON=$(oc get devworkspaces "$DEVWORKSPACE_NAME" -n "$NAMESPACE" -o json)
  UPDATED_JSON=$(echo "$DW_JSON" | \
    jq --arg COMPONENT "web-terminal-exec" \
       --arg NAME "WEB_TERMINAL_IDLE_TIMEOUT" \
       --arg VALUE "$TIMEOUT" \
       "$JQ_SET_ENV_SCRIPT")
  if ! echo "$UPDATED_JSON" | oc apply -f - 2>"$LOGS_FILE"; then
    echo "Failed to update Web Terminal image due to conflict. Please try again."
    echo "If error persists, see logs in $LOGS_FILE"
    exit 1
  fi

  echo "Updated Web Terminal idle timeout to $TIMEOUT. Terminal may restart."
}

function reset_timeout() {
  if [[ "$1" == "help" ]] || [[ "$1" == "--help" ]]; then
    echo "Reset idle timeout used for terminal to the default"
    echo "Usage: 'wtoctl reset timeout'"
    exit 0
  fi
  expect_no_args "wtoctl reset timeout" "$@"
  DW_JSON=$(oc get devworkspaces "$DEVWORKSPACE_NAME" -n "$NAMESPACE" -o json)
  UPDATED_JSON=$(echo "$DW_JSON" | \
    jq --arg COMPONENT "web-terminal-exec" \
       --arg NAME "WEB_TERMINAL_IDLE_TIMEOUT" \
       "$JQ_RESET_ENV_SCRIPT")
  if ! echo "$UPDATED_JSON" | oc apply -f - 2>"$LOGS_FILE"; then
    echo "Failed to update Web Terminal image due to conflict. Please try again."
    echo "If error persists, see logs in $LOGS_FILE"
    exit 1
  fi

  echo "Reset Web Terminal idle timeout. Terminal may restart."
}

function get_shell() {
  if [[ "$1" == "help" ]] || [[ "$1" == "--help" ]]; then
    echo "Get shell used for terminal"
    echo "Usage: 'wtoctl get shell'"
    exit 0
  fi
  expect_no_args "wtoctl get shell" "$@"
  echo "Current shell is $SHELL"
}

function set_shell() {
  if [[ "$1" == "help" ]] || [[ "$1" == "--help" ]]; then
    echo "Set shell used for terminal"
    echo "Usage: 'wtoctl set shell <shell>'"
    exit 0
  fi
  expect_one_arg "wtoctl set shell" "$@"
  local SHELL="$1"
  DW_JSON=$(oc get devworkspaces "$DEVWORKSPACE_NAME" -n "$NAMESPACE" -o json)
  UPDATED_JSON=$(echo "$DW_JSON" | \
    jq --arg COMPONENT "web-terminal-tooling" \
       --arg NAME "SHELL" \
       --arg VALUE "$SHELL" \
       "$JQ_SET_ENV_SCRIPT")
  if ! echo "$UPDATED_JSON" | oc apply -f - 2>"$LOGS_FILE"; then
    echo "Failed to update Web Terminal shell due to conflict. Please try again."
    echo "If error persists, see logs in $LOGS_FILE"
    exit 1
  fi

  echo "Updated Web Terminal shell to $SHELL. Terminal may restart."
}

function reset_shell() {
  if [[ "$1" == "help" ]] || [[ "$1" == "--help" ]]; then
    echo "Reset shell used for terminal to the default"
    echo "Usage: 'wtoctl reset shell'"
    exit 0
  fi
  expect_no_args "wtoctl reset shell" "$@"
  DW_JSON=$(oc get devworkspaces "$DEVWORKSPACE_NAME" -n "$NAMESPACE" -o json)
  UPDATED_JSON=$(echo "$DW_JSON" | \
    jq --arg COMPONENT "web-terminal-tooling" \
       --arg NAME "SHELL" \
       "$JQ_RESET_ENV_SCRIPT")
  if ! echo "$UPDATED_JSON" | oc apply -f - 2>"$LOGS_FILE"; then
    echo "Failed to update Web Terminal shell due to conflict. Please try again."
    echo "If error persists, see logs in $LOGS_FILE"
    exit 1
  fi

  echo "Reset Web Terminal shell. Terminal may restart"
}

function get_storage() {
  if [[ "$1" == "help" ]] || [[ "$1" == "--help" ]]; then
    echo "Get persistent storage mounted to terminal"
    echo "Usage: 'wtoctl get storage'"
    exit 0
  fi
  expect_no_args "wtoctl get storage" "$@"
  DW_JSON=$(oc get devworkspaces "$DEVWORKSPACE_NAME" -n "$NAMESPACE" -o json)
  STORAGE_SUMMARY=$(echo "$DW_JSON" | jq -r "$JQ_GET_STORAGE_SCRIPT")
  echo "$STORAGE_SUMMARY"
}

function set_storage() {
  if [[ "$1" == "help" ]] || [[ "$1" == "--help" ]]; then
    echo "Add persistent storage to terminal"
    echo "Usage: 'wtoctl set storage'"
    exit 0
  fi
  expect_no_args "wtoctl set storage" "$@"
  local STORAGE_SIZE MOUNT_PATH OK CURR_STORAGE_SIZE

  DW_JSON=$(oc get devworkspaces "$DEVWORKSPACE_NAME" -n "$NAMESPACE" -o json)
  CURR_STORAGE_SIZE=$(echo "$DW_JSON" | jq -r "$JQ_GET_STORAGE_SIZE_SCRIPT")

  if [ -z "$CURR_STORAGE_SIZE" ]; then
    read -rp "Enter desired storage size (default: '100Mi'): " STORAGE_SIZE
  else
    echo "Persistent storage is already configured. Using existing size '$CURR_STORAGE_SIZE'"
    STORAGE_SIZE="$CURR_STORAGE_SIZE"
  fi
  read -rp "Enter desired mount path (default: '/home/user/storage'): " MOUNT_PATH
  if [ -z "$STORAGE_SIZE" ]; then
    STORAGE_SIZE="100Mi"
  fi
  if [ -z "$MOUNT_PATH" ]; then
    MOUNT_PATH="/home/user/storage"
  fi

  # Basic checks for storage parameters to avoid footguns
  if [ -e "$MOUNT_PATH" ]; then
    warning "Mount path $MOUNT_PATH already exists in this container. Mounting storage will overwrite contents of $MOUNT_PATH."
  fi
  if ! [[ "$STORAGE_SIZE" =~ ^[.0-9]+(K|Ki|M|Mi|G|Gi) ]]; then
    warning "Unrecognized Kubernetes unit suffix for storage: $STORAGE_SIZE"
  fi

  read -rp "Adding persistent volume with size $STORAGE_SIZE to $MOUNT_PATH. Is this okay? (y/N): " OK
  if [[ "$OK" =~ ^(y|Y|yes|Yes) ]] ; then
    UPDATED_JSON=$(echo "$DW_JSON" | \
      jq --arg VOLUME_SIZE "$STORAGE_SIZE" \
         --arg MOUNT_PATH  "$MOUNT_PATH" \
         "$JQ_SET_STORAGE_SCRIPT")
    if ! echo "$UPDATED_JSON" | oc apply -f - 2>"$LOGS_FILE"; then
      echo "Failed to update Web Terminal storage due to conflict. Please try again."
      echo "If error persists, see logs in $LOGS_FILE"
      exit 1
    fi
    echo "Updated Web Terminal storage. Terminal may restart"
  else
    echo "Not adding storage"
  fi
}

function reset_storage() {
  if [[ "$1" == "help" ]] || [[ "$1" == "--help" ]]; then
    echo "Remove any mounted persistent storage from terminal"
    echo "Usage: 'wtoctl reset storage'"
    exit 0
  fi
  expect_no_args "wtoctl reset storage" "$@"
  local DELETE_PVC PVC_NAME
  PVC_NAME=$(oc get pvc -o json | jq -r --arg DEVWORKSPACE_NAME "$DEVWORKSPACE_NAME" "$JQ_GET_PVC_NAME_SCRIPT")
  read -rp "Would you like to also delete the persistent volume claim used for storage (name: $PVC_NAME)? (y/N): " DELETE_PVC

  DW_JSON=$(oc get devworkspaces "$DEVWORKSPACE_NAME" -n "$NAMESPACE" -o json)
  UPDATED_JSON=$(echo "$DW_JSON" | jq "$JQ_RESET_STORAGE_SCRIPT")
  if ! echo "$UPDATED_JSON" | oc apply -f - 2>"$LOGS_FILE"; then
    echo "Failed to update Web Terminal storage due to conflict. Please try again."
    echo "If error persists, see logs in $LOGS_FILE"
    exit 1
  fi

  if [[ "$DELETE_PVC" =~ ^(y|Y|yes|Yes) ]] ; then
    oc delete pvc -n "$NAMESPACE" "$PVC_NAME" --wait=false
    echo "Deleted persistent volume claim $PVC_NAME"
  fi

  echo "Reset Web Terminal storage. Terminal may restart"
}

function do_get() {
  if [[ $# -lt 1 ]]; then
    echo "wtoctl get expects additional arguments. See 'wtoctl get --help' for more information"
    exit 1
  fi
  case $1 in
    "image")
      get_tooling_image "${@:2}" ;;
    "timeout")
      get_timeout "${@:2}" ;;
    "shell")
      get_shell "${@:2}" ;;
    "storage")
      get_storage "${@:2}" ;;
    "--help"|"help")
      get_help ;;
    *)
      echo "Unknown option $1 for 'wtoctl get'"
      echo "See 'wtoctl get --help' for usage."
      exit 1
  esac
}

function do_set() {
  if [[ $# -lt 1 ]]; then
    echo "wtoctl set expects additional arguments. See 'wtoctl set --help' for more information"
    exit 1
  fi
  case $1 in
    "image")
      set_tooling_image "${@:2}" ;;
    "timeout")
      set_timeout "${@:2}" ;;
    "shell")
      set_shell "${@:2}" ;;
    "storage")
      set_storage "${@:2}" ;;
    "--help"|"help")
      set_help ;;
    *)
      echo "Unknown option $1 for 'wtoctl set'"
      echo "See 'wtoctl set --help' for usage."
      exit 1
  esac
}

function do_reset() {
  if [[ $# -lt 1 ]]; then
    echo "wtoctl reset expects additional arguments. See 'wtoctl reset --help' for more information"
    exit 1
  fi
  case $1 in
    "image")
      reset_tooling_image "${@:2}" ;;
    "timeout")
      reset_timeout "${@:2}" ;;
    "shell")
      reset_shell "${@:2}" ;;
    "storage")
      reset_storage "${@:2}" ;;
    "--help"|"help")
      reset_help ;;
    *)
    echo "Unknown option $1 for 'wtoctl reset'"
    echo "See 'wtoctl reset --help' for usage."
    exit 1
  esac
}

case $1 in
  "get")
    preflight_checks
    do_get "${@:2}" ;;
  "set")
    preflight_checks
    do_set "${@:2}" ;;
  "reset")
    preflight_checks
    do_reset "${@:2}" ;;
  "--help"|"help")
    general_help ;;
  "image")
    help_or_error image_help "wtoctl image" "${@:2}" ;;
  "timeout")
    help_or_error timeout_help "wtoctl timeout" "${@:2}" ;;
  "shell")
    help_or_error shell_help "wtoctl shell" "${@:2}" ;;
  "storage")
    help_or_error storage_help "wtoctl storage" "${@:2}" ;;
  *)
    echo "Unknown command $1 for wtoctl"
    echo "Run 'wtoctl --help' for usage"
esac
