#!/bin/bash
#
# Copyright (c) 2020-2023 Red Hat, Inc.
# This program and the accompanying materials are made
# available under the terms of the Eclipse Public License 2.0
# which is available at https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0
#
# Contributors:
#   Red Hat, Inc. - initial API and implementation
#

#
# This script is meant to serve as a wrapper for the `kn` CLI in order to
# facilitate downloading and updated version of the CLI from the cluster.
# It is meant to be placed in $PATH earlier than the actual `kn` CLI in order
# to prompt the user to download `kn` instead of using the installed version.
#

set -e

readonly PLATFORM="linux"
readonly ARCH="amd64"

readonly KN_DOWNLOAD_PATH="/tmp/cli-downloads"
readonly BINARIES_PATH="/home/user/bin"

readonly PREF_USE_DOWNLOADED="use-downloaded"
readonly PREF_USE_INSTALLED="use-installed"
readonly PREF_CANNOT_DOWNLOAD="no-download"
readonly DEVWORKSPACE_PREF_ANNOTATION="web-terminal.redhat.io/kn-wrapper-preference"
readonly DEVWORKSPACE_PREF_ANNOTATION_ESCAPED="web-terminal\.redhat\.io/kn-wrapper-preference"

SCRIPT_DIR=$(cd "$(dirname "$0")" || exit; pwd)
readonly LOG_FILE="$SCRIPT_DIR/kn-wrapper.log"
readonly PREFS_FILE="$SCRIPT_DIR/kn-wrapper-preferences"

# Wrapper-specific arguments, prefixed by 'wto' to avoid colliding with any arguments
# in the wrapped binary
readonly ARG_RESET_WRAPPER="--wto-reset-preferences"
readonly ARG_RESTORE_PREFERENCES="--wto-restore-preferences"
readonly ARG_PRINT_LOG="--wto-show-logs"

# Save original arguments in order to call 'kn' later seamlessly
ORIGINAL_ARGS=( "$@" )

function error() {
  local timestamp
  timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)
  echo "[$timestamp ERROR] $1" >> "$LOG_FILE"
}

function info() {
  local timestamp
  timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)
  echo "[$timestamp INFO ] $1" >> "$LOG_FILE"
}

function save_preference() {
  local PREF="$1"
  echo "$PREF" > "$PREFS_FILE"
  info "Adding annotation to DevWorkspace to save download preference"
  oc annotate dw "$DEVWORKSPACE_NAME" -n "$DEVWORKSPACE_NAMESPACE" "$DEVWORKSPACE_PREF_ANNOTATION=$PREF" >>"$LOG_FILE" 2>&1
}

function read_preferences() {
  if [ -f "$PREFS_FILE" ]; then
    cat "$PREFS_FILE"
    return
  fi
  info "No preference file found, attempting to read preference from DevWorkspace annotations"
  ANNOTATION_PREF=$(oc get dw "$DEVWORKSPACE_NAME" -n "$DEVWORKSPACE_NAMESPACE" -o jsonpath="{.metadata.annotations.$DEVWORKSPACE_PREF_ANNOTATION_ESCAPED}" 2>>"$LOG_FILE")
  if [ -n "$ANNOTATION_PREF" ]; then
    # Save preference from workspace to file to avoid having to make API calls all the time
    info "Read preference $ANNOTATION_PREF from DevWorkspace"
    echo "$ANNOTATION_PREF" > "$PREFS_FILE"
    echo "$ANNOTATION_PREF"
  else
    info "Could not find preference in DevWorkspace annotations"
  fi
}

function reset_wrapper() {
  info "Resetting kn download preference and removing downloaded binary"
  rm -rf "$PREFS_FILE"
  rm -rf "$BINARIES_PATH/kn"
}

function call_actual_kn() {
  # Drop the script's directory from path to get the other installed kn
  PATH=${PATH/${SCRIPT_DIR}:/}
  kn "${ORIGINAL_ARGS[@]}"
}

function get_download_url() {
  if ! oc auth can-i get consoleclidownloads --all-namespaces -q 2>>"$LOG_FILE"; then
    error "Current user cannot get consoleclidownloads"
    return 1
  fi
  CLI_DOWNLOAD_JSON=$(oc get consoleclidownloads kn -o json 2>>"$LOG_FILE")
  if [ -z "$CLI_DOWNLOAD_JSON" ]; then
    error "ConsoleCLIDownload 'kn' not found"
    return 1
  fi
  URL=$(echo "$CLI_DOWNLOAD_JSON" | jq -r '.spec.links[].href' 2>>"$LOG_FILE"| grep "$PLATFORM" | grep "$ARCH")
  if [ -z "$URL" ]; then
    error "Could not get URL for 'kn' CLI"
    return 1
  fi
  info "Found consoleclidownload for kn with URL $URL"
  echo "$URL"
}

function need_download() {
  if [ -x "$BINARIES_PATH/kn" ]; then
    return 1
  fi
  return 0
}

function download_kn() {
  URL="$1"
  mkdir -p "$KN_DOWNLOAD_PATH" "$BINARIES_PATH" >> "$LOG_FILE" 2>&1 || return 1
  info "Downloading kn from $URL"
  curl "$URL" -o "$KN_DOWNLOAD_PATH/kn.tar.gz" >> "$LOG_FILE" 2>&1 || return 1
  info "Downloaded kn archive to $KN_DOWNLOAD_PATH/kn.tar.gz"
  info "Extracting kn CLI to $KN_DOWNLOAD_PATH"
  tar -xf "$KN_DOWNLOAD_PATH/kn.tar.gz" -C "$KN_DOWNLOAD_PATH" >> "$LOG_FILE" 2>&1 || return 1
  info "Extracted kn CLI to $KN_DOWNLOAD_PATH"
  mv "$KN_DOWNLOAD_PATH/kn" "$BINARIES_PATH/kn" || return 1
  info "Moved kn CLI to $BINARIES_PATH/kn"
}

function prompt_user() {
  if ! KN_URL=$(get_download_url); then
    # Can't get URL to download kn so just use the default
    save_preference "$PREF_CANNOT_DOWNLOAD"
    call_actual_kn
    exit 0
  fi
  echo "Detected serverless installation in this cluster."
  echo "The 'kn' CLI is available at: $KN_URL"
  read -rp "Would you like to automatically download 'kn' from this URL instead of using the built-in version? (y/N): " OK
  echo ""
  info "Received response '$OK' for prompt"
  if [[ "$OK" =~ ^(y|Y|yes|Yes) ]] ; then
    if ! download_kn "$KN_URL"; then
      echo "Failed to download CLI. See log file $LOG_FILE for details"
      exit 1
    fi
    save_preference "$PREF_USE_DOWNLOADED"
  elif [[ "$OK" =~ ^(n|N|no|No) ]] ; then
    save_preference "$PREF_USE_INSTALLED"
  fi
  call_actual_kn
}

function check_wrapper_arguments() {
  if [[ $# != 1 ]]; then
    return
  fi
  case "$1" in
    "$ARG_RESET_WRAPPER")
  reset_wrapper
  exit 0
    ;;
    "$ARG_RESTORE_PREFERENCES")
      PREF=$(read_preferences)
      if [ "$PREF" == "$PREF_USE_DOWNLOADED" ]; then
  info "Restoring preference $PREF in initial setup"
  if need_download; then
    if ! KN_URL=$(get_download_url); then
      # Can't get URL to download kn so just use the default
      save_preference "$PREF_CANNOT_DOWNLOAD"
      exit 0
    fi
    if ! download_kn "$KN_URL"; then
      error "Failed to re-download kn"
      save_preference "$PREF_CANNOT_DOWNLOAD"
    fi
  fi
      fi
      exit 0
    ;;
    "$ARG_PRINT_LOG")
      cat "$LOG_FILE"
  exit 0
    ;;
    --wto-*)
      echo "Invalid wrapper argument $1"
      exit 1
  esac
}

check_wrapper_arguments "$@"

PREF=$(read_preferences)
case "$PREF" in
  "$PREF_USE_DOWNLOADED")
    if need_download; then
      if ! KN_URL=$(get_download_url); then
        # Can't get URL to download kn so just use the default
        save_preference "$PREF_CANNOT_DOWNLOAD"
        call_actual_kn
        exit 0
      fi
      if ! download_kn "$KN_URL"; then
        error "Failed to re-download kn"
        save_preference "$PREF_CANNOT_DOWNLOAD"
      fi
    fi
    call_actual_kn
    ;;
  "$PREF_USE_INSTALLED") call_actual_kn ;;
  "$PREF_CANNOT_DOWNLOAD") call_actual_kn ;;
  *) prompt_user ;;
esac
